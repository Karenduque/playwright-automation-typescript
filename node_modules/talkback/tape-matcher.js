"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var content_encoding_1 = __importDefault(require("./utils/content-encoding"));
var media_type_1 = __importDefault(require("./utils/media-type"));
var logger_1 = require("./logger");
var isEqual = require("lodash/isEqual");
var TapeMatcher = /** @class */ (function () {
    function TapeMatcher(tape, options) {
        this.tape = tape;
        this.options = options;
    }
    TapeMatcher.prototype.sameAs = function (otherTape) {
        var otherReq = otherTape.req;
        var req = this.tape.req;
        if (!this.isSameUrl(req, otherReq)) {
            return false;
        }
        if (!this.isSameMethod(req, otherReq)) {
            return false;
        }
        if (!this.isSameHeaders(req, otherReq)) {
            return false;
        }
        return this.options.ignoreBody || this.isSameBody(req, otherReq);
    };
    TapeMatcher.prototype.isSameBody = function (req, otherReq) {
        var mediaType = new media_type_1.default(req);
        var contentEncoding = new content_encoding_1.default(req);
        var sameBody;
        if (contentEncoding.isUncompressed() && mediaType.isJSON() && req.body.length > 0 && otherReq.body.length > 0) {
            var parsedReqBody = JSON.parse(req.body.toString());
            var parsedOtherReqBody = JSON.parse(otherReq.body.toString());
            sameBody = isEqual(parsedReqBody, parsedOtherReqBody);
        }
        else {
            sameBody = req.body.equals(otherReq.body);
        }
        if (!sameBody) {
            if (!this.options.bodyMatcher) {
                logger_1.logger.log.debug("Not same BODY ".concat(req.body, " vs ").concat(otherReq.body));
                return false;
            }
            var bodyMatches = this.options.bodyMatcher(this.tape, otherReq);
            if (!bodyMatches) {
                logger_1.logger.log.debug("Not same bodyMatcher ".concat(req.body, " vs ").concat(otherReq.body));
                return false;
            }
        }
        return true;
    };
    TapeMatcher.prototype.isSameHeaders = function (req, otherReq) {
        var currentHeadersLength = Object.keys(req.headers).length;
        var otherHeadersLength = Object.keys(otherReq.headers).length;
        var sameNumberOfHeaders = currentHeadersLength === otherHeadersLength;
        if (!sameNumberOfHeaders) {
            logger_1.logger.log.debug("Not same #HEADERS ".concat(JSON.stringify(req.headers), " vs ").concat(JSON.stringify(otherReq.headers)));
            return false;
        }
        var headersSame = true;
        Object.keys(req.headers).forEach(function (k) {
            var entryHeader = req.headers[k];
            var header = otherReq.headers[k];
            headersSame = headersSame && entryHeader === header;
        });
        if (!headersSame) {
            logger_1.logger.log.debug("Not same HEADERS values ".concat(JSON.stringify(req.headers), " vs ").concat(JSON.stringify(otherReq.headers)));
            return false;
        }
        return true;
    };
    TapeMatcher.prototype.isSameMethod = function (req, otherReq) {
        var sameMethod = req.method === otherReq.method;
        if (!sameMethod) {
            logger_1.logger.log.debug("Not same METHOD ".concat(req.method, " vs ").concat(otherReq.method));
            return false;
        }
        return true;
    };
    TapeMatcher.prototype.isSameUrl = function (req, otherReq) {
        var sameURL = req.url === otherReq.url;
        if (!sameURL) {
            if (!this.options.urlMatcher) {
                logger_1.logger.log.debug("Not same URL ".concat(req.url, " vs ").concat(otherReq.url));
                return false;
            }
            var urlMatches = this.options.urlMatcher(this.tape, otherReq);
            if (!urlMatches) {
                logger_1.logger.log.debug("Not same urlMatcher ".concat(req.url, " vs ").concat(otherReq.url));
                return false;
            }
        }
        return true;
    };
    return TapeMatcher;
}());
exports.default = TapeMatcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwZS1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhcGUtbWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhFQUFzRDtBQUN0RCxrRUFBMEM7QUFJMUMsbUNBQStCO0FBRS9CLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBRXpDO0lBSUUscUJBQVksSUFBVSxFQUFFLE9BQWdCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQ3hCLENBQUM7SUFFRCw0QkFBTSxHQUFOLFVBQU8sU0FBZTtRQUNwQixJQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFBO1FBQzlCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBRTtZQUNsQyxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFBO1NBQ2I7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDdEMsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbkUsQ0FBQztJQUVPLGdDQUFVLEdBQWxCLFVBQW1CLEdBQVEsRUFBRSxRQUFhO1FBQ3hDLElBQU0sU0FBUyxHQUFHLElBQUksb0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNwQyxJQUFNLGVBQWUs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