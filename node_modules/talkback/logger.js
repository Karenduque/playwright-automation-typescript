"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeLogger = exports.logger = exports.NoopLogger = exports.ConsoleLogger = void 0;
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger(options) {
        this.options = options;
        if (this.options.debug) {
            this.debug("DEBUG mode active");
        }
    }
    ConsoleLogger.prototype.info = function (message) {
        if (!this.options.silent || this.options.debug) {
            console.log(this.formatMessage(message, "INFO"));
        }
    };
    ConsoleLogger.prototype.debug = function (message) {
        if (this.options.debug) {
            console.debug(this.formatMessage(message, "DEBUG"));
        }
    };
    ConsoleLogger.prototype.error = function (message) {
        var optionalParameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParameters[_i - 1] = arguments[_i];
        }
        console.error.apply(console, __spreadArray([this.formatMessage(message, "ERROR")], optionalParameters, false));
    };
    ConsoleLogger.prototype.formatMessage = function (message, level) {
        var now = new Date();
        var formattedNow = now.toISOString();
        var messageString;
        if (typeof message == "object") {
            messageString = JSON.stringify(message);
        }
        else {
            messageString = message;
        }
        return "".concat(formattedNow, " [").concat(this.options.name, "] [").concat(level, "] ").concat(messageString);
    };
    return ConsoleLogger;
}());
exports.ConsoleLogger = ConsoleLogger;
var NoopLogger = /** @class */ (function () {
    function NoopLogger() {
    }
    NoopLogger.prototype.debug = function (message) {
    };
    NoopLogger.prototype.error = function (message) {
        var optionalParameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParameters[_i - 1] = arguments[_i];
        }
    };
    NoopLogger.prototype.info = function (message) {
    };
    return NoopLogger;
}());
exports.NoopLogger = NoopLogger;
var logger = {
    log: new NoopLogger()
};
exports.logger = logger;
function initializeLogger(options) {
    logger.log = new ConsoleLogger(options);
}
exports.initializeLogger = initializeLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFVQTtJQUdFLHVCQUFZLE9BQWdCO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELDRCQUFJLEdBQUosVUFBSyxPQUFZO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtTQUNqRDtJQUNILENBQUM7SUFFRCw2QkFBSyxHQUFMLFVBQU0sT0FBWTtRQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNwRDtJQUNILENBQUM7SUFFRCw2QkFBSyxHQUFMLFVBQU0sT0FBWTtRQUFFLDRCQUE0QjthQUE1QixVQUE0QixFQUE1QixxQkFBNEIsRUFBNUIsSUFBNEI7WUFBNUIsMkNBQTRCOztRQUM5QyxPQUFPLENBQUMsS0FBSyxPQUFiLE9BQU8saUJBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUssa0JBQWtCLFVBQUM7SUFDNUUsQ0FBQztJQUVELHFDQUFhLEdBQWIsVUFBYyxPQUFZLEVBQUUsS0FBYTtRQUN2QyxJQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO1FBQ3RCLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUN0QyxJQUFJLGFBQXFCLENBQUE7UUFDekIsSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDOUIsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDeEM7YUFBTTtZQUNMLGFBQWEsR0FBRyxPQUFPLENBQUE7U0FDeEI7UUFDRCxPQUFPLFVBQUcsWUFBWSxlQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxnQkFBTSxLQUFLLGVBQUssYUFBYSxDQUFFLENBQUE7SUFDN0UsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXJDRCxJQXFDQztBQXJDWSxzQ0FBYTtBQXVDMUI7SUFBQTtJQVVBLENBQUM7SUFUQywwQkFBSyxHQUFMLFVBQU0sT0FBWTtJQUNsQixDQUFDO0lBRUQsMEJBQUssR0FBTCxVQUFNLE9BQVk7UUFBRSw0QkFBNEI7YUFBNUIsVUFBNEIsRUFBNUIscUJBQTRCLEVBQTVCLElBQTRCO1lBQTVCLDJDQUE0Qjs7SUFDaEQsQ0FBQztJQUVELHlCQUFJLEdBQUosVUFBSyxPQUFZO0lBQ2pCLENBQUM7SUFFSCxpQkFBQztBQUFELENBQUMsQUFWRCxJQVVDO0FBVlksZ0NBQVU7QUFZdkIsSUFBTSxNQUFNLEdBQUc7SUFDYixHQUFHLEVBQUUsSUFBSSxVQUFVLEVBQUU7Q0FDdEIsQ0FBQTtBQU1PLHdCQUFNO0FBSmQsU0FBUyxnQkFBZ0IsQ0FBQyxPQUFnQjtJQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3pDLENBQUM7QUFFZSw0Q0FBZ0IifQ==